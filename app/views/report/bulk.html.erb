<% extra_head_content << capture do %>
<link rel="alternate" type="application/xml" title="Solr" href="<%=build_solr_request_from_response%>">
<script type="text/javascript">
report_model = {
	total_rows: <%= @response['response']['numFound'] %>,
	data_url: <%= report_pids_url(params.merge(:format => 'json')).to_json.html_safe %>,
}
function catalog_url(element)
{
	url='<%=link_to 'druid:xxxxxxxxx', url_for(:controller => :catalog,:action => :show, :id => 'druid:xxxxxxxxx'), :target => '_blank'%>'
	url=url.replace(/xxxxxxxxx/g,element);
	return url;
	
}
function open_version(druids){
	log=document.getElementById('log');
	var params={
		'severity': $('#severity').val(),
		'description': $('#description').val(),
	}
	$.each(druids, function(i,element){
		var element_url=catalog_url(element_url);
		//send a request to open this object and log the success or failure
		url='<%=url_for :controller => :items,:action => :prepare, :id => 'druid:xxxxxxxxx'%>'
		url=url.replace('xxxxxxxxx',element);
		var xhr=$.ajax({url: url, type: 'POST', data: params});
		xhr.success(function(response,status,xhr) { 
			log.innerHTML = log.innerHTML+job_count.pop()+" "+element+' is ready'+"<br>\n";	
		})
		xhr.error(function(xhr,status,err){error_handler(xhr,status,err,element_url,job_count.pop())})
	})
}
function close_version(druids){
	log=document.getElementById('log');
	var params={
		'severity': $('#severity').val(),
		'description': $('#description').val(),
	}
	$.each(druids, function(i,element){
		var element_url=catalog_url(element);
		//send a request to open this object and log the success or failure
		url='<%=url_for :controller => :items,:action => :close_version, :id => 'druid:xxxxxxxxx'%>'
		url=url.replace('xxxxxxxxx',element_url);
		var xhr=$.ajax({url: url, type: 'POST', data: params});
		xhr.success(function(response,status,xhr) { 
			log.innerHTML = log.innerHTML+job_count.pop()+" "+element+' Opened'+"<br>\n";	
		})
		xhr.error(function(xhr,status,err){error_handler(xhr,status,err,element_url,job_count.pop())})
	})
}
function set_content_type(druids){
	log=document.getElementById('log');
	var params={
		'content_type': $('#content_type').val(),
		'resource_type': $('#resource_type').val(),
	}
	$.each(druids, function(i,element){
		i=i+1;
     	var	element_url=catalog_url(element);
		//send a request to open this object and log the success or failure
		url='<%=url_for :controller => :items,:action => :set_content_type, :id => 'druid:xxxxxxxxx'%>'
		url=url.replace('xxxxxxxxx',element_url);
		var xhr=$.ajax({url: url, type: 'POST', data: params});
		xhr.success(function(response,status,xhr) { 
			log.innerHTML = log.innerHTML+job_count.pop()+" "+element_url+' Updated'+"<br>\n";	
		})
		xhr.error(function(xhr,status,err){error_handler(xhr,status,err,element,job_count.pop())})
	})
}
function purge(druids){
	log=document.getElementById('log');
	$.each(druids, function(i,element){
		var element_url=catalog_url(element);
		//send a request to open this object and log the success or failure
		url='<%=url_for :controller => :items,:action => :purge_object, :id => 'druid:xxxxxxxxx'%>'
		url=url.replace('xxxxxxxxx',element);
		var xhr=$.ajax({url: url, type: 'GET'});
		xhr.success(function(response,status,xhr) { 
			log.innerHTML = log.innerHTML+job_count.pop()+' ' +element_url+' Purged'+"<br>\n";	
		})
		xhr.error(function(xhr,status,err){error_handler(xhr,status,err,element_url,job_count.pop())})
	})
}

function fetch_druids(fun)
{
	log=document.getElementById('log');
	log.style.display="block";
	if(document.getElementById('pids').value.length>5)
	{
		txt=document.getElementById('pids').value
		txt=txt.replace(/druid:/g,'');
		druids=txt.split("\n");
		last=druids.pop();
		if(last != ''){druids.push(last);}
		log.innerHTML="Using "+ druids.length +" user supplied druids.\n<br>"
		job_count=[]
		for(i=druids.length;i>0;i--)
		{
			job_count.push(i);
		}
		fun(druids);
	}
	else{
		log.innerHTML="Fetching all "+report_model['total_rows']+" druids.<br>\n"
		$.getJSON(report_model['data_url'], function(data){
			report_model['druids']=[]
			$.each(data.druids, function(i,s){
				report_model['druids'].push(s);
			});
			log.innerHTML=log.innerHTML+"Received "+report_model['druids'].length+" pids, starting work<br>\n"
			fun(report_model['druids']);
		}).error(function(jqXhr, textStatus, error) {
			alert("ERROR: " + textStatus + ", " + error);
		});
	}
}
function reindex(druids){
	log=document.getElementById('log');
	$.each(druids, function(i,element){
		var element_url=catalog_url(element);
		//send a request to open this object and log the success or failure
		url='<%=url_for :controller => :dor,:action => :reindex, :pid => 'druid:xxxxxxxxx'%>'
		url=url.replace('xxxxxxxxx',element);
		var xhr=$.ajax({url: url, type: 'GET'});
		xhr.success(function(response,status,xhr) { 
			log.innerHTML = log.innerHTML+job_count.pop()+' ' +element_url+' Reindexed'+"\n<br>";	
		})
		xhr.error(function(xhr,status,err){error_handler(xhr,status,err,element_url,job_count.pop())})
	})
}
function set_rights(druids){
	log=document.getElementById('log');
	var params={
		'rights': $('#rights').val(),
	}
	$.each(druids, function(i,element){
		element_url=catalog_url(element);
		//send a request to open this object and log the success or failure
		url='<%=url_for :controller => :items,:action => :set_rights, :id => 'druid:xxxxxxxxx'%>'
		url=url.replace('xxxxxxxxx',element);
		var xhr=$.ajax({url: url, type: 'POST', data: params});
		xhr.success(function(response,status,xhr) { 
			log.innerHTML = log.innerHTML+job_count.pop()+" "+element_url+' Updated'+"<br>\n";	
		})
		xhr.error(function(xhr,status,err){error_handler(xhr,status,err,element_url,job_count.pop())})
	})
}
function error_handler(xhr,status,err,element,index){
	msg='';
	if(xhr.responseText.length<150)
	{
		msg=xhr.responseText;
	}
	if (xhr.status < 500) {
		log.innerHTML = log.innerHTML+index+" "+element+':'+status+' '+err+" : "+msg+"<br>\n";	
	} else {
		log.innerHTML = log.innerHTML+index+" "+element+':'+status+' '+err+" : "+msg+"<br>\n";	
	}
}
function source_id(){
	log=document.getElementById('log');
	log.style.display="block";
	txt=document.getElementById('source_ids').value
	txt=txt.replace(/druid:/g,'');
	druids=txt.split("\n")
	last=druids.pop();
	if(last != ''){druids.push(last);}
	d=[]
	for(i=0;i< druids.length; i++)
	{
		parts=druids[i].split(" ",2);
		d.push({'druid': parts[0], 'source': parts[1]});
	}
	log.innerHTML="Using "+ druids.length +" user supplied druids and source ids.<br>\n"

	log=document.getElementById('log');
	$.each(d, function(i,element){
		element_url=catalog_url(element['druid']);
		i=i+1;
		//send a request to open this object and log the success or failure
		params={
			'new_id': element['source']
		}
		url='<%=url_for :controller => :items,:action => :source_id, :id => 'druid:xxxxxxxxx'%>'
		url=url.replace('xxxxxxxxx',element['druid']);
		var xhr=$.ajax({url: url, type: 'POST', data: params});
		xhr.success(function(response,status,xhr) { 
			log.innerHTML = log.innerHTML+i+' ' +element_url+' source id updated.'+"<br>\n";	
		})
		xhr.error(function(xhr,status,err){error_handler(xhr,status,err,element_url,i)})
	})
}
function get_druids()
{
	log=document.getElementById('pids');
	$('#pid_list').show(400);
	$.getJSON(report_model['data_url'], function(data){
		report_model['druids']=[]
		$.each(data.druids, function(i,s){
			report_model['druids'].push(s);
			log.innerHTML=log.innerHTML+'druid:'+s+"\n"
		});
	}).error(function(jqXhr, textStatus, error) {
		alert("ERROR: " + textStatus + ", " + error);
	});
}
function get_source_ids()
{
	log=document.getElementById('source_ids');
	$.getJSON(report_model['data_url']+'&source_id=true', function(data){
		report_model['druids']=[]
		$.each(data.druids, function(i,s){
			report_model['druids'].push(s);
			log.innerHTML=log.innerHTML+'druid:'+s+"\n"
		});
	}).error(function(jqXhr, textStatus, error) {
		alert("ERROR: " + textStatus + ", " + error);
	});
}
</script>
<style>
.bulk_operation{border:1px;border-style:solid;padding:25px;margin-top:25px;display:none}
</style>
<% end %>

<% @page_title = "#{application_name} Search Results" %>
<% extra_head_content << render_opensearch_response_metadata.html_safe %>
<%= render :partial => 'search_form' %>
<% if has_search_parameters? %>
<%= render :partial => 'did_you_mean' %>
<%= render 'constraints', :localized_params=>params %>
<%= render 'report_view_toggle', :localized_params=>params %>

<% end %>

<% sidebar_items << capture do %>
<%= render :partial=>'facets' %>
<% end %>
<p><%=%></p>
<h1>Bulk update operations</h1>
<button onclick="get_druids();">Get druids from search</button>
<button onclick="$('#pid_list').show(400)">Paste a druid list</button>
<div id="pid_list" name="pid_list" style="display:none;" class="bulk_operation">
	<h1>Druids</h1>
	<p>Bulk actions will be performed on this list of druids. Modify the list of paste a list of druids here to operate on them instead.</p>
	<br><textarea id="pids" name="pids"></textarea><br>
	<button onclick="$('#source_id').show(400);get_source_ids();">Source Id</button>
	<button onclick="$('#reindex').show(400)">Reindex</button>
	<button onclick="$('#purge').show(400)">Purge</button>
	<button onclick="$('#open').show(400)">Open version</button>
	<button onclick="$('#close').show(400)">Close version</button>
	<button onclick="$('#content_type').show(400)">Content type</button>
	<button onclick="$('#rights').show(400)">Object rights</button>
</div>
<div class="bulk_operation" id="open" name="open">
	<h1>Open a new version of the items so they can be modified</h1>
	<label for="severity">Type</label>
	<select id="severity" name="severity">
		<option value="major">Major</option>
		<option value="minor">Minor</option>
		<option value="admin">Admin</option>
	</select>
	<br>
	<label for="description">version description</label><br>
	<textarea id="description" name="description" ></textarea>
	<br>
	<button onclick="fetch_druids(open_version);">Open objects for modification</button><br>
</div>
<br>

<div class="bulk_operation" id="close" name="close">
	<h1>Close a version of the items so the changes can be accessioned</h1>
	<label for="severity">Type</label>
	<select id="severity" name="severity">
		<option value="major">Major</option>
		<option value="minor">Minor</option>
		<option value="admin">Admin</option>
	</select>
	<br>
	<label for="description">version description</label><br>
	<textarea id="description" name="description" ></textarea>
	<br>
	<button onclick="fetch_druids(close_version);">Close objects</button><br>
</div>
<br>

<div class="bulk_operation" id="content_type" name="content_type">
	<%
	current_content_types=[]
	count=1
	@response['facet_counts']['facet_fields']['content_type_facet'].each do |k|
	if count %2 == 1
		current_content_types << k
	end
	count +=1
	end
	if current_content_types==[]
		current_content_types << 'none'
	end
	%>
	<h1>Set content and resource types</h1>
	<p>This searches for items with the old content type and changes them to the new content type, along with changing any resources of the old type to the new type.</p>
	<label>Old content type</label>
	<%=select_tag :content_type, options_for_select(current_content_types) %><br>
	<label>Old resource type</label>
	<%=select_tag :resource_type, options_for_select(resource_types) %><br>
	<label>New content type</label>
	<%=select_tag :content_type, options_for_select(content_types) %><br>
	<label>New resource type</label>
	<%=select_tag :resource_type, options_for_select(resource_types) %><br>
	<button onclick="fetch_druids(set_content_type)">Set content types</button>
</div>
<div class="bulk_operation" id="purge" name="purge">
	<h1>Purge items that have been registered but have not been submitted for accessioning from fedora</h1>
	<button onclick="fetch_druids(purge);">Purge objects from fedora</button><br>
</div>
<div class="bulk_operation" id="reindex" name="reindex">
	<h1>Reindex items</h1>
	<button id="reindex" name="reindex" onclick="fetch_druids(reindex);">Update solr index for objects</button>
</div>
<div class="bulk_operation" id="source_id">
	<h1>Change source id</h1>
	<p>This needs a list of pids and source ids, with a space between the pid and the corresponding source id. ex.<br>druid:bc088fn5010 fuller:M1090_S15_B02_F12_0007</p>
	<textarea style="width:50%" id="source_ids" name="source_ids"></textarea><br>
	<button id="set_source_id" name="set_source_id" onclick="source_id();">Update source ids</button>
</div>
<div class="bulk_operation" id="rights" name="rights">
	<h1>Set object rights</h1>
	<%=select_tag :rights, options_for_select(['world','stanford', 'none', 'dark'])%>
	<button id="rights_button" name="rights_button" onclick="fetch_druids(set_rights);">Set rights</button>
</div>
<br><div style="display:none;width:50%" id="log" name="log"></div></div>